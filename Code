import tkinter as tk
from tkinter import messagebox, simpledialog

class SplitwiseApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Bill Splitter")
        self.ask_num_items()

    def ask_num_items(self):
        self.num_items = simpledialog.askinteger("Bill Setup", "Enter number of items:")
        if self.num_items is None or self.num_items <= 0:
            messagebox.showerror("Input Error", "Enter a valid number of items.")
            return
        self.show_bill_input()

    def show_bill_input(self):
        self.bill_win = tk.Toplevel(self.root)
        self.bill_win.title("Bill Input")

        tk.Label(self.bill_win, text="Enter Bill Details").grid(row=0, columnspan=3)
        tk.Label(self.bill_win, text="Item").grid(row=1, column=0)
        tk.Label(self.bill_win, text="Price (INR)").grid(row=1, column=1)
        tk.Label(self.bill_win, text="Quantity").grid(row=1, column=2)

        self.bill_entries = []
        for i in range(self.num_items):
            item_entry = tk.Entry(self.bill_win)
            item_entry.grid(row=i + 2, column=0)
            price_entry = tk.Entry(self.bill_win)
            price_entry.grid(row=i + 2, column=1)
            qty_entry = tk.Entry(self.bill_win)
            qty_entry.grid(row=i + 2, column=2)
            self.bill_entries.append((item_entry, price_entry, qty_entry))

        tk.Button(self.bill_win, text="Enter", command=self.process_bill_input).grid(row=self.num_items + 2, columnspan=3)

    def process_bill_input(self):
        self.bill = {}
        for item, price, qty in self.bill_entries:
            item = item.get().strip()
            try:
                price = float(price.get().strip())
                qty = float(qty.get().strip())
            except ValueError:
                messagebox.showerror("Input Error", "Enter valid price and quantity.")
                return
            self.bill[item] = (price, qty)

        self.bill_win.destroy()
        self.ask_num_people()

    def ask_num_people(self):
        self.num_people = simpledialog.askinteger("Order Setup", "Enter number of people:")
        if self.num_people is None or self.num_people <= 0:
            messagebox.showerror("Input Error", "Enter a valid number of people.")
            return
        self.show_order_input()

    def show_order_input(self):
        self.order_win = tk.Toplevel(self.root)
        self.order_win.title("Order Input")

        tk.Label(self.order_win, text="Enter Orders").grid(row=0, columnspan=7)
        tk.Label(self.order_win, text="Name").grid(row=1, column=0)

        for col in range(1, 11, 2):
            tk.Label(self.order_win, text=f"Item {col//2+1}").grid(row=1, column=col)
            tk.Label(self.order_win, text="Qty").grid(row=1, column=col+1)

        self.order_entries = []
        for i in range(self.num_people):
            row_entries = [tk.Entry(self.order_win)]
            row_entries[0].grid(row=i * 2 + 2, column=0)
            for j in range(1, 11, 2):
                item_entry = tk.Entry(self.order_win)
                item_entry.grid(row=i * 2 + 2, column=j)
                qty_entry = tk.Entry(self.order_win)
                qty_entry.grid(row=i * 2 + 2, column=j + 1)
                row_entries.append(item_entry)
                row_entries.append(qty_entry)

            copy_btn = tk.Button(self.order_win, text="Copy Above", command=lambda i=i: self.copy_above(i))
            copy_btn.grid(row=i * 2 + 3, column=0)

            self.order_entries.append(row_entries)

        tk.Button(self.order_win, text="Enter", command=self.process_order_input).grid(row=self.num_people * 2 + 2, columnspan=7)

    def copy_above(self, row_idx):
        if row_idx == 0:
            return
        prev_row = self.order_entries[row_idx - 1]

        for i in range(1, len(prev_row), 2):
            self.order_entries[row_idx][i].delete(0, tk.END)
            self.order_entries[row_idx][i].insert(0, prev_row[i].get())
            self.order_entries[row_idx][i + 1].delete(0, tk.END)
            self.order_entries[row_idx][i + 1].insert(0, prev_row[i + 1].get())

    def process_order_input(self):
        self.orders = []
        for row in self.order_entries:
            name = row[0].get().strip()
            for i in range(1, 11, 2):
                item = row[i].get().strip()
                qty = row[i + 1].get().strip()

                if item and qty:
                    try:
                        qty = float(qty)
                    except ValueError:
                        messagebox.showerror("Input Error", "Enter a valid quantity.")
                        return

                    if item not in self.bill:
                        messagebox.showerror("Input Error", f"{item} is not on the bill.")
                        return

                    self.orders.append((name, item, qty))

        self.order_win.destroy()
        self.calculate_total()

    def calculate_total(self):
        item_shares = {}
        for _, item, qty in self.orders:
            if item not in item_shares:
                item_shares[item] = 0
            item_shares[item] += qty

        results = {}
        for name, item, qty in self.orders:
            price, available_qty = self.bill[item]

            if item_shares[item] > available_qty:
                messagebox.showerror("Error", f"Insufficient quantity for {item}. Available: {available_qty}")
                return

            shared_cost = price / item_shares[item]
            if name not in results:
                results[name] = 0
            results[name] += shared_cost * qty

        self.show_results(results)

    def show_results(self, totals):
        result_win = tk.Toplevel(self.root)
        result_win.title("Total to Pay")
        
        tk.Label(result_win, text="Each person's total:").grid(row=0, column=0)
        
        for i, (name, amount) in enumerate(totals.items(), start=1):
            tk.Label(result_win, text=f"{name}: â‚¹{amount:.2f}").grid(row=i, column=0)

if __name__ == "__main__":
    root = tk.Tk()
    root.withdraw()
    app = SplitwiseApp(root)
    root.mainloop()


